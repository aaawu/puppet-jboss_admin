# == Defines jboss_admin::<%= type[:name] %>
#
# <%= type[:description] %>
#
# === Parameters
#
<% type[:attributes].each_key do |attr| -%>
# [*<%= puppet_name attr %>*]
#   <%= type[:attributes][attr][:description] %>
#
<% end -%>
#
define jboss_admin::<%= type[:name] %> (
  $server,
<% type[:attributes].each_key do |attr| -%>
  $<%= (puppet_name attr).to_s.ljust 30 %> = undef,
<% end -%>
  $ensure                         = present,
  $path                           = $name
) {
  if $ensure == present {

<% type[:attributes].each_key do |attr| -%>
<% attribute = type[:attributes][attr] -%>
<% if attribute[:required] -%>
    if $<%= puppet_name attr %> == undef { fail('The attribute <%= puppet_name attr %> is undefined but required') }
<% end -%>
<% if attribute[:type][:'TYPE_MODEL_VALUE'] == 'INT' -%>
    if $<%= puppet_name attr %> != undef && !is_integer($<%= puppet_name attr %>) { 
      fail('The attribute <%= puppet_name attr %> is not an integer') 
    }
<% end -%>
<% end -%>  

    $raw_options = { 
<% type[:attributes].each_key do |attr_name| -%>
      <%= "'#{attr_name}'".ljust 30 %> => $<%= puppet_name attr_name %>,
<% end -%>
    }
    $options = delete_undef_values($raw_options)

    jboss_resource { $path:
      ensure  => $ensure,
      server  => $server,
      options => $options
    }

  }

  if $ensure == absent {
    jboss_resource { $path:
      ensure => $ensure,
      server => $server
    }
  }


}
